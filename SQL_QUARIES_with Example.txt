

==================================================================================================
==================================================================================================
NOTES WITH EXAMPLE
==================================================================================================
==================================================================================================
  


Create database:-
-----------------------------------------
         CREATE DATABASE db_name;

Drop/ Delete database:-
-----------------------------------------
         drop database db_name;

TO use the Database:-
-----------------------------------------
         USE db_name;



   {{{ First of all we use the database where we have to create table. 
    let suppose database name is "College" and table name is "student"}}}

               table_name = student

To Create table:-
--------------------------------------------

     use college;
        create table table_name(
           column_name1 datatype constraint,
           column_name2 datatype constraint
           column_name3 datatype constraint
           );
           
           example:-
              create table student(
                 rollno int primary key,
                 name varchar(50),
                 age int not null
                );

DROP/DELETE TABLE:
--------------------------------------
          drop table student;

VIEW ALL DATA OF TABLE :-
-------------------------------------
          select * from student;

INSERT INTO TABLE:-
----------------------------------
          insert into student
            ( columnName1, columnName2 )  
          values
            (col1_v1, col2_v2) 
            (col1_v1, col2_v2)     
           
    columnName1=rollno
    columnName2=name

          insert into student
             (rollno, name)
          values
             (01, "Amardeep"),
             (02, "Krishna");

Use of FOREIGN KEY Constraint:--
=========================================================
                The FOREIGN KEY constraint is used to prevent actions that would destroy links between tables.

                A FOREIGN KEY is a field (or collection of fields) in one table, that refers to the PRIMARY KEY in another table.

                    create table emp (
                      id int primary key,
                      foreign key (emp_roll), references student(rollno)
                     );
                    here emp_roll is "emp" table column and student(rollno) is old means student table rollno. which is primary key
 

Use of DEFAULT Constraint:-- 
======================================================
              if the starting salary is 20000 then we use       DEFAULT constraint through this default value already assigned but we can change this if person had 25000 salary then we can change it otherwise table had default value

                    create table emp (
                      id int primary key,
                      salary int default 20000
                    );
            insert into emp (id) values (01);

Use of CHECK Constraint:-- 
===========================================
              it is used to limit the value range that can be placed in a column.
     

            CREATE TABLE Persons (
              ID int NOT NULL,
                   Age int,
                CHECK (Age>=18)
              );

             or
          
           CREATE TABLE Persons (
              ID int NOT NULL,
               Age int,
               City varchar(255),
               CONSTRAINT CHK_Person CHECK (Age>=18 AND City='Sandnes')
              );

               here we can write anything int he palce of CHK_Person.

     use of Distinct keyword:--
=============================================
            used for different value
              SELECT DISTINCT City FROM Persons;

     if a Person table had ten different name but they are from Delhi, Mumbai And Kolkata city so repetition of city is here but when we use 
        
            SELECT DISTINCT City FROM Persons;
           it show only Delhi, Mumbai And Kolkata it cannot repeat city name

 Use of Where Clause:--
===================================
          used to filter records.

             select * from Persons WHERE City = 'Delhi';

            AND OPERATOR :- select* from Persons WHERE Age=50 AND City ="Delhi"
      here it satisfy both conditions 

         OR OPERATOR :-
     ------------------------------------------------------------------
               select * from Persons WHERE Age=50 OR City ="Delhi"

               here if single condition match it print the table

       BETWEEN OPERATOR (Select from a given range):-
     ------------------------------------------------------------------ 

            select * from Persons WHERE Age BETWEEN 50 And 60;

                  it gives all member name whose age 50, 51,52,.........,60
    
       IN OPERATOR (Matches any value in the list):--
     ------------------------------------------------------------------
                  
            select * from Persons WHERE City IN ("Delhi", "Mumbai")

                    it gives all members who is from in delhi or mumbai

        NOT OPERATOR (it give opposite value of given condition):--
       ------------------------------------------------------------------

            select * from Persons WHERE Age NOT BETWEEN 50 AND 60;

              it cannot gives member name whose age 50, 51,52,.........,60
 
 Use of LIMIT Clause:--
==================================

       use to set the limit on number of rows:
          select col1, col2 from table_name limit number;
  
           select * from Persons limit 3;
           select * from Persons where Age>=50 limit 3;
                     
                      it gives only 3 staring row from the data.

 use of ORDER BY keyword:--
======================================
              used to sort the result into ascending(ASC) or descending(DESC)
      
             a). Select  * from Persons ORDER BY City asc; 
             b). Select  * from Persons ORDER BY City desc LIMIT 3; 
       
                        a  gives table alphabetically by city
                        b give only 3 rows of table alphabetically by city

 Use of AGGREGATE function:-
=============================
            An aggregate function is a function that performs a calculation on a set of values, and returns a single value.

             select MAX(Age) from Persons;


use of GROUP BY clause:--
===========================
              6). GROUP BY clause:--
----------------------------------------------
              Groups rows that have same values into summary rows.

                       select City , count(ID) from Persons group by City

                       select City, Age , count(ID) from Persons group by City, Age
                  
             after select query columns and group by columns are same


use of HAVING clause:-
===============================

             Similar to WHERE i.e. applies some condition on rows 

             used when we want to apply any condition after grouping

             select city, count(name)
             from Persons 
             group by City
             HAVING max(Age)>40;

to UPDATE the table:--
================================

      UPDATE Persons SET Age = 42 WHERE Age = 40;
   
              or we want to add 2 year of all persons Age 
                
                 update Persons Set Age= Age +2;

to DELETE the rows or existing rows:--

        DELETE FROM Persons where Age > 60; 
            



CASCADING OF FOREIGN KEY()FK:--
========================================

   What is Cascade?

         In SQL, the term CASCADE refers to an action triggered automatically when a change occurs in a parent table, propagating the update or deletion to the related child table(s).By using ON DELETE CASCADE or ON UPDATE CASCADE,



  1).  On DELETE Cascade:--
------------------------------------
                   when we create a FK using this option it deletes the referencing rows in the child table when the referenced row is deleted in the parent table which has primary key

                               OR
 
             ON DELETE CASCADE ensures that when a record in the parent table is deleted, the corresponding records in the child table automatically get deleted.



2). On UPDATE Cascade:-- 
-------------------------------
                 when we create a foreign key using UPDATE CASCADE the referencing rows are update in child table when the referenced row is updated in the parent table which has a primary key.

                              OR

                 We will use this type of cascade when a primary key in the parent table is updated. In such cases, the corresponding foreign key values in the child table are automatically updated.


 Example:-- let create a new table using FOREIGN key

      1st table:--
           create table dept(
             id int primary key,
             name varchar(50) not null
            );

      2nd table :--
            CREATE TABLE teacher (
              id INT PRIMARY KEY,
               name VARCHAR(50),
               dept_id INT,
               FOREIGN KEY (dept_id) REFERENCES dept(id)
                ON UPDATE CASCADE
                ON DELETE CASCADE
              );


WRITE A QUERY TO UPADTE
            
              update dept set id = "new id" where id="old id";


              TABLE RELATED QUERIE
=================================================

             Used to change the schema
                       schema:-- it is design of columns, columns datatype, columns constraints. 


 To add a column
---------------------------------------
                 ALTER TABLE table_name 
                 ADD COLUMN column_name datatype constraint;


                 ALTER TABLE Persons 
                 ADD COLUMN age INT;

 To Drop column
--------------------------------
                  ALTER TABLE table_name 
                  DROP COLUMN column_name;


                  ALTER TABLE Persons 
                  DROP column age INT;

To Rename Table
------------------------------------------
                 ALTER TABLE table_name 
                 RENAME TO new_table_name;

                 Alter table Persons
                 Rename to Person;

To Change Column(Rename)
--------------------------------------------
                 ALTER TABLE table_name 
                CHANGE COLUMN old_column_name new_column_name new_datatype new constraints;

                alter table Person
                change column Age UMAR Varchar(50) not null;

Modify column(Modify datatype/constraints)
-----------------------------------------------
                 ALTER TABLE table_name 
                 CHANGE COLUMN coumn_name new_datatype new constraints;

                Alter table Person
                change column Umar int;

         Use of TRUNCATE
----------------------------------------------

                   delete all the data of the table


                TRUNCATE TABLE table_name;
              
                   TRUNCATE TABLE Person;


Practice Question 
============================
Qs: In the Person table: 
=============================
a. Change the name of column name" to "full_name". 
b. Delete all the students who scored age greater than 80. 
c. Delete the column for age.


a).    Alter table Person change column name full_name varchar(50)/
       Alter table Person change name full_name varchar(50)

b).    delete from Person where age>60

c).    alter table Person drop column age


         JOINS IN SQL
==============================================================

Joins is used to combine rows from two or more tables, based on related column between them


types of joins
=============================

              INNER JOIN
========================================================

Returns record that have matching values in both tables

syntax:-

            SELECT column(s)
            FROM tableA
            INNER JOIN tableB
            ON tableA.col_name = tableB.col_name;

         example with dept and teacher table
 -------------------------------------------------------------

            SELECT * FROM dept
            INNER JOIN teacher
            ON dept.id = teacher.dept_id;


                   LEFT JOIN
=======================================================

Returns all record from the left table and the matched record from right table

syntax:-- 
             SELECT column(s)
             FROM tableA
             LEFT JOIN tableB
             ON tableA.col_name = tableB.col_name;

            example with dept and teacher table
 -------------------------------------------------------------

            SELECT * FROM dept
            LEFT JOIN teacher
            ON dept.id = teacher.dept_id;


              RIGHT JOIN
===================================================

Returns all record from the right table and the matched record from right table

syntax:-- 
             SELECT column(s)
             FROM tableA
             RIGHT JOIN tableB
             ON tableA.col_name = tableB.col_name;

              example with dept and teacher table
 -------------------------------------------------------------

            SELECT * FROM dept
            RIGHT JOIN teacher
            ON dept.id = teacher.dept_id;


                    FULL JOIN
=============================================================

Returns all record when there is a match either in left or right table

syntax in MySQL :-- 
          
              example with dept and teacher table
 -------------------------------------------------------------

            SELECT * FROM dept AS a
            LEFT JOIN teacher AS b
            ON a.id = b.dept_id
            UNION
            SELECT * FROM dept AS a
            RIGHT JOIN teacher AS b
            ON a.id = b.dept_id;
            


                 UNION
===================================================
It is used to combine the result-set of two or more SELECT statements
Gives UNIQUE record

to use it:-
         * every SELECT should have same no. of columns
          
         * columns must have similar data types

         * columns in every SELECT should be in same order 

syntax:-
        SELECT column(s) FROM tableA
        UNION
        SELECT column(s) FROM tableB

example   select name from dept
          UNION
          select name from teacher;




SQL Sub Queries
================================
A Subquery or inner query or a nested query is a query within another SQL query

it involves 2 select statements

Syntax:--
--------------
SELECT column(s)
From table_name
where col_name operator
(subquery);



EXAMPLE WITH QUESTIONS:--
----------------------------------------------------
 SQL Sub Queries 
Example 
Get names of all students who scored more than class average. 
Step 1. Find the avg of class 
Step 2. Find the names of students with marks > avg


Sol:-- SELECT names,marks From student where marks>(SELECT AVG(marks) FROM student);
-----------------------------------------------------------------------------


SQL Sub Queries 
Example 2:-- 
Find the names of all students with even roll numbers. 
Step 1. Find the even roll numbers 
Step 2. Find the names of students with even roll no

Sol:- SELECT name, rollno FROM student
      WHERE rollno IN (
               SELECT rollno FROM student 
               WHERE rollno % 2=0);


